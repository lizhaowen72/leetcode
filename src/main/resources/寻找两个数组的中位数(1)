More intuitive thinking process:
If we combine these 2 arrays, then median divide the array into 2 parts: left and right whose length are the "same". The
left part consists of part of nums1 + part of nums2, so we can divide both nums1 and nums2 to 2 smaller parts and it can be the whole big picture.

Magic hidden in the solution is: Where to put the median number if the total length is odd 奇数, left_part or right_part?
Answer: we put the median of odd number of elements to the left part., that's the reason why j = (m + n + 1)/2 - i can work.
It comes to the most difficult part: odd/even, I want to give some complementary 补充 explanation:
Note the presumption 假定 in the OP:
1.1 If m + n is even, then split the elements evenly into the left and right part, so i + j = m + n - i - j. (Clearly the
 1st middle number is in the left part and the 2nd middle number is in the right part) => thus j = (m + n)/2 - i (1)
1.2 If m + n is odd, then put the median in the left part, so the number of elements in the left part is one more than
that of elements in the right part. That's where + 1 comes in the formula: i + j = m + n - i - j + 1 => thus j = (m + n + 1)/2 - i(2)

Then!!! (1) can be merged to (2)! How? Let's list them together:

(1) j = (m + n)/2 - i, if m + n is even
(2) j = (m + n + 1)/2 - i, if m + n is odd
Notice that if a number num is even, then num/2 = (num + 1)/2, for example 4/2 = (4 + 1)/2 = 2. So (m + n)/2 is equal to
 (m + n + 1)/2 in (1). Thus we can merge them to (2). That's the reason why we use j = (m + n + 1)/2 - i through our code.

Another implicit 隐含的 point in the binary search induction rule: 0 <= j <= n (it is thought as right by default, but it is not
 until m < n), let me prove.
Normally we don't wanna IndexOutOfBound, so the complete version should be:

 if(i - 1 >= 0 && i - 1 < m && j >= 0 && j < n && nums1[i - 1] > nums2[j]) right = i - 1;
 else if(j - 1 >= 0 && j - 1 < n && i >= 0 && i < m && nums2[j - 1] > nums1[i]) left = i + 1;
But since the imin starts with 0 and imax starts with m, so it is guaranteed that: 0 <= i <= m(1)
And j = (m + n + 1)/2 - i, since 0 <= i <= m, (m + n + 1)/2 - m <= j <= (m + n + 1)/2 which can be simplified to (n - m + 1)/2 <= j <= (m + n + 1)/2:
For the left side: (n - m + 1)/2 <= j => n - m >= 0(since we make sure that m <= n by switching nums1 and nums2) => (n - m + 1)/2 >= 1/2 = 0 => so j >= 0(2.1)
For the right side: j <= (m + n + 1)/2 => m <= n => so we have j <= (2n + 1)/2 => and 2n + 1 must be odd, so (2n + 1)/2 = 2n/2 = n => thus j <= n(2.2)
So 0 <= j <= n is an implicit condition(2).

With (1) and (2):

 if(i - 1 >= 0 && /*i - 1 < m*/ && /*j >= 0*/ && j < n && nums1[i - 1] > nums2[j]) right = i - 1;
 else if(j - 1 >= 0 && /*j - 1 < n*/ && /*i >= 0*/ && i < m && nums2[j - 1] > nums1[i]) left = i + 1;
Then condition I commented is right by default, so no need to write them. Also
For if statement, since the relation j = (m + n + 1)/2 - i, if i >= 1, then upper bound of j is decreased by 1, i.e.
 j <= n becomes j < n, so j < n is right by default, no need to write or we can just keep one of them.
For else statement, the same reason, j - 1 >= 0 and i < m are right dependently, we can just keep one of them.
Above, the code can be simplified to(one kind of the final versions):

 if(i - 1 >= 0 && /* i - 1 < m && j >= 0 && j < n && */ nums1[i - 1] > nums2[j]) right = i - 1;
 else if(j - 1 >= 0 && /* j - 1 < n && i >= 0 && i < m && */ nums2[j - 1] > nums1[i]) left = i + 1;
So it is a way too too long way to get the same condition as OP's solution. I prefer the original version myself since
it is direct, not tricky.