    class Solution {

        public int lengthOfLIS(int[] nums) {
            int[] tails = new int[nums.length];
            int size = 0;
            for (int x : nums) {
                int i = 0, j = size;
                while (i != j) {
                    int mid = i + (j - i) / 2;
                    if (tails[mid] < x) {
                        i = mid + 1;
                    } else {
                        j = mid;
                    }
                }
                tails[i] = x;
                if (i == size) {
                    ++size;
                }
            }
            return size;
        }

        public int lengthOfLIS2(int[] nums) {
            if (nums.length == 0) return 0;
            int[] dp = new int[nums.length];
            dp[0] = 1;
            int maxAns = 1;
            for (int i = 1; i < dp.length; i++) {
                int maxVal = 0;
                for (int j = 0; j < i; j++) {
                    if (nums[i] > nums[j]) {
                        maxVal = Math.max(maxVal, dp[j]);
                    }
                }
                dp[i] = maxVal + 1;
                maxAns = Math.max(maxAns, dp[i]);
            }
            return maxAns;
        }
    }

//runtime:1 ms
//memory:37.1 MB
